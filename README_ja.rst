=====
DOCAN
=====

.. note:: 実験プロダクトです。このREADMEにはやりたいことが記述されてはいますが、多くは未実装です。

``docutils`` でパースしたドキュメントを解析・レポートするツールです。

想定機能
========

* reStructuredTextやMarkdownで書かれたにドキュメント対して、やや高度なテキスト解析を行う。
* 設定ファイルや追加のPythonパッケージを用いることで、ルールを追加・自作することが出来る。
* 解析結果に基づいてレポートをアウトプットして、内容次第でExitCode 0以外で終了する。

使い方について
==============

標準的な使い方としては、以下を想定しています。

#. ``pip install`` でインストールする
#. ``docan init`` で環境をセットアップする
#. ルールの設定・追加を実施する
#. ``docan lint`` で解析する（結果に応じてエラー等を出力する）

目標
====

**「Python界隈におけるtextlint」** を仮目標としています。

なるべくなら一般的なLinterと同程度の表現力を目指しますが、依存ライブラリの機能に寄せて実装を見送るものもあります。

マイルストーン
--------------

* 単一のreStructuredTextを解析して、組み込みルールに抵触していないか解析する。
* 複数のreStructuredTextを解析して、組み込みルールに抵触していないか解析する。
* 組み込みルールとは別の名前空間にルールを用意して、同じコマンドで利用できるようにする。
* Sphiinx拡張を提供して、 ``linkcheck`` ビルダーと似た立ち位置の解析用ビルダーを提供する。
* 提供ドキュメントが本機能をもとに正常性を保てるようにする。

開発・運用の進行周りで考えていること
====================================

設定ファイルについて
--------------------

想定では、次の順に探索する予定です、

* ``pyoroject.toml`` 内の ``tool.docan`` セクション
* ``setup.cfg`` 内の ``docan`` セクション
* ``docan.cfg``

ただし、 最初のうちはtoml以外の2パターンを中心に実装を進めます。
（なるべくPython 3.12までには）

ルールについて
--------------

マイルストーン序盤のうちは、普段遣いしそうなルールを組み込みルールとして用意します。
ルール実装の過程で、適切な実装形態を模索します。

ある程度のインターフェースが見えた段階で、意図的にサードパーティルールを作成します。

なお、本人の嗜好に基づき、日本語に関するルールを中心に開発します。
（適切なタイミングで可能な限りサードパーティルール化します）

ドキュメントについて
--------------------

当面の間はi18nを使わない状態でen/jaを用意します。
これは、自身が日本人であり当面の間は日本語テキストを前提に開発するためです。

よって、2言語のドキュメントは以下のような棲み分けになります。

* en: 標準的なガイドを記述する
* ja: 上記に加えて設計段階のドキュメントを含む

ライセンス周り
==============

リポジトリ内のコード・ドキュメントは Apache License version 2.0に基づいてライセンスしています。
